---
# tasks file for ca

- name: Install required packages
  ansible.builtin.package:
    name: "{{ role_packages }}"
    state: present
    update_cache: true
  tags:
    - requirements
    - packages
    - always

- name: Create group for CA role 
  ansible.builtin.group:
    name: "{{ ca_group }}"
    state: present
    system: true
  tags:
    - requirements
    - user_and_group

- name: Create user for CA role
  ansible.builtin.user:
    name: "{{ ca_user }}"
    group: "{{ ca_group }}"
    home: "{{ ca_base_dir }}"
    shell: /bin/bash
    create_home: no
    system: true
  tags:
    - requirements
    - user_and_group

- name: Create CA base directory 
  ansible.builtin.file:
    path: "{{ ca_base_dir }}"
    state: directory
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0755'
  tags:
    - requirements
    - directories

- name: Create CA directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0755'
  loop:
    - "{{ ca_certs_dir }}"
    - "{{ ca_private_dir }}"
    - "{{ ca_newcerts_dir }}"
    - "{{ ca_crl_dir }}"
  tags:
    - requirements
    - directories

- name: Change permissions for CA private directory
  ansible.builtin.file:
    path: "{{ ca_private_dir }}"
    state: directory
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0700'
  tags:
    - requirements
    - directories

- name: Create CA configuration file
  ansible.builtin.template:
    src: openssl.cnf.j2
    dest: "{{ ca_config_file }}"
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0644'
  tags:
    - configuration

- name: Initialization of CA serial file
  ansible.builtin.copy:
    content: "1000\n"
    dest: "{{ ca_serial_file }}"
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0644'
    force: false
  tags:
    - configuration
    - initialization

- name: Initialization of CA index file
  ansible.builtin.file:
    path: "{{ ca_index_file }}"
    state: touch
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0644'
  tags:
    - configuration
    - initialization

- name: Verify if CA key exists
  ansible.builtin.stat:
    path: "{{ ca_private_key }}"
  register: ca_key_exists
  tags:
    - configuration
    - initialization
    - check

- name: Generate CA private key
  ansible.builtin.command:
    cmd: >
      openssl genrsa 
      -out {{ ca_private_key }} 
      {{ ca_key_size }}
    creates: "{{ ca_private_key }}"
  when: not ca_key_exists.stat.exists
  tags:
    - configuration
    - initialization
    - key_generation

- name: Set permissions on CA private key
  ansible.builtin.file:
    path: "{{ ca_private_key }}"
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0600'
  when: not ca_key_exists.stat.exists
  tags:
    - configuration
    - initialization
    - key_generation

- name: Create hard link for CA private key
  ansible.builtin.file:
    src: "{{ ca_private_key }}"
    dest: "{{ ca_private_dir }}/ca.key"
    state: hard
    owner: "{{ ca_user }}"
    group: root
    mode: '0640'
  when: not ca_key_exists.stat.exists
  tags:
    - configuration
    - initialization
    - key_generation

- name: Verify if CA certificate exists
  ansible.builtin.stat:
    path: "{{ ca_certificate }}"
  register: ca_cert_exists
  tags:
    - configuration
    - initialization
    - check

- name: Generate CA self-signed certificate
  ansible.builtin.command:
    cmd: >
      openssl req -new -x509
      -key {{ ca_private_key }}
      -out {{ ca_certificate }}
      -days {{ ca_validity_days }}
      -config {{ ca_config_file }}
      -extensions v3_ca
      -subj "/C={{ ca_country }}/ST={{ ca_state }}/L={{ ca_city }}/O={{ ca_organization }}/OU={{ ca_organizational_unit }}/CN={{ ca_name }}/emailAddress={{ ca_email }}"
    creates: "{{ ca_certificate }}"
  when: not ca_cert_exists.stat.exists
  tags:
    - configuration
    - initialization
    - cert_generation

- name: Set permissions on the autogenerated CA certificate file
  ansible.builtin.file:
    path: "{{ ca_certificate }}"
    owner: "{{ ca_user }}"
    group: "{{ ca_group }}"
    mode: '0600'
  when: not ca_cert_exists.stat.exists
  tags:
    - configuration
    - initialization
    - cert_generation

- name: create hard link for CA certificate
  ansible.builtin.file:
    src: "{{ ca_certificate }}"
    dest: "{{ ca_certs_dir }}/ca.crt"
    state: hard
    owner: "{{ ca_user }}"
    group: root
    mode: '0644'
  when: not ca_cert_exists.stat.exists
  tags:
    - configuration
    - initialization
    - cert_generation

- name: Copy CA certificate {{ ca_certificate }} to /usr/local/share/ca-certificates system directory
  ansible.builtin.copy:
    src: "{{ ca_certificate }}"
    dest: "/usr/local/share/ca-certificates/{{ ca_name }}-ca.crt"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: update_ca_certificates
  when: ansible_os_family == "Debian" or ansible_os_family == "Ubuntu"
  tags:
    - configuration
    - finalizing

